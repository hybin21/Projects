#ifndef INTLIST_H
#define INTLIST_H

/*******************************************************************************
 *
 * IntList
 *_________________________________________________________________
 * <description>
 * This program performs basic int linked list member functions
 *_________________________________________________________________
 * INPUTS:
 *  N/A
 *
 * OUTPUTS:
 *  displays the computed int linked  list
 *
*******************************************************************************/

// structure for int node
struct IntNode
{
    int data;   // IN - data of the node
    IntNode *next;  // IN - pointer to point the next node

    /****************
    ** CONSTRUCTOR **
    ****************/
    IntNode(int data) : data(data), next(0) {}  // data of the node 
};

/****************
** CONSTRUCTOR **
 ****************/   
/******************************************************************************
 * IntNode(int data)
 *  Constructor: initializes an empty list
 *-----------------------------------------------------------------------------
 *  Parameters: 
 *      int data: data of the node
 *-----------------------------------------------------------------------------
 *  Return: nothing
 *****************************************************************************/

class IntList
{
public:
    /****************
    ** CONSTRUCTOR **
    ****************/
    IntList();

    /***************
    ** DESTRUCTOR **
    ****************/
    ~IntList();

    /***************
    **  ACCESSOR  **
    ****************/
    void display() const;

    /****************
    *** MUTATORS ***
    ****************/
    void push_front(int value); // IN - value of the new node
    void push_back(int value);  // IN - value of the new node
    void pop_front();
    void select_sort();         
    void insert_sorted(int value);  // IN - value of the new node 
    void remove_duplicates();  



private:
    IntNode *head;  // CALC - head of the IntList
    IntNode *tail;  // CALC - tail of the IntList
};
#endif


/******************************************************************************
 * IntList Class
 *  <description>: This Class is a smaller, simpler version of the STL 
 *          vector class that is capable of only storing integers
 *
 *****************************************************************************/

/****************
** CONSTRUCTOR **
****************/

/******************************************************************************
 * IntList();
 *  Constructor: initializes an empty list
 *-----------------------------------------------------------------------------
 *  Parameters: none
 *-----------------------------------------------------------------------------
 *  Return: nothing
 *****************************************************************************/

/*****************
 **  DESTRUCTOR **
 ****************/

/******************************************************************************
 * ~IntList()
 *  Destructor: dealocates the remaining dynamically allocated memory
 *-----------------------------------------------------------------------------
 *  Parameter: none
 *-----------------------------------------------------------------------------
 *  Return: none
 *****************************************************************************/

/****************
 *** ACCESSORS ***
 ****************/

/******************************************************************************
 * void display() const
 *  Accessor: displays to a single line all the int values stored in the list,
 *           each separated by a space
 *-----------------------------------------------------------------------------
 *  Parameter: none
 *-----------------------------------------------------------------------------
 *  Return: none
 *****************************************************************************/

/****************
 *** MUTATORS ***
 ****************/

/******************************************************************************
 * void push_front(int value)
 *  Mutator: Inserts a data value at the front of the list
 *-----------------------------------------------------------------------------
 *  Parameter: 
 *      int value: value of the new node
 *-----------------------------------------------------------------------------
 *  Return: none
 *****************************************************************************/

/******************************************************************************
 * void push_back(int value)
 *  Mutator: Inserts a data value at the end of the list
 *-----------------------------------------------------------------------------
 *  Parameter: 
 *      int value: value of the new node
 *-----------------------------------------------------------------------------
 *  Return: none
 *****************************************************************************/

/******************************************************************************
 *  void pop_front()
 *  Mutator: remove the front node of the list
 *-----------------------------------------------------------------------------
 *  Parameter: none
 *-----------------------------------------------------------------------------
 *  Return: none
 *****************************************************************************/

/******************************************************************************
 * void select_sort()
 *  Mutator: sorts the IntList by using selection-sort method
 *-----------------------------------------------------------------------------
 *  Parameter: none
 *-----------------------------------------------------------------------------
 *  Return: none
 *****************************************************************************/

/******************************************************************************
 * void insert_sorted(int value)
 *  Mutator: Inserts a data into appropriate positionin the list
 *-----------------------------------------------------------------------------
 *  Parameter: 
 *      int value: value of the new node
 *-----------------------------------------------------------------------------
 *  Return: none
 *****************************************************************************/

/******************************************************************************
 * void remove_duplicates()
 *  Mutator: removes duplicates
 *-----------------------------------------------------------------------------
 *  Parameter: none
 *-----------------------------------------------------------------------------
 *  Return: none
 *****************************************************************************/


